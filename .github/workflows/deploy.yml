name: Deploy to AWS

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - 'release/**'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: ⏱ Set Deployment Start Time
      run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set Up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18

    - name: Install AWS CDK
      run: npm install -g aws-cdk

    - name: Retrieve GitHub OIDC Token
      id: auth
      run: |
        echo "Fetching OIDC token..."
        TOKEN_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
        OIDC_TOKEN=$(echo "$TOKEN_JSON" | jq -r '.value')
        
        if [[ "$OIDC_TOKEN" == "null" || -z "$OIDC_TOKEN" ]]; then
          echo "Error: Could not retrieve a valid OIDC token"
          exit 1
        fi
        
        echo "::set-output name=OIDC_TOKEN::$OIDC_TOKEN"

    - name: Debug GitHub OIDC Token
      run: |
        TOKEN_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL")
        echo "OIDC Token JSON: $TOKEN_JSON"
        OIDC_VALUE=$(echo "$TOKEN_JSON" | jq -r '.value')
        echo "OIDC Raw Token: $OIDC_VALUE"
        echo "Decoded Token Claims:"
        echo "$OIDC_VALUE" | jq -R 'split(".") | .[1] | @base64d | fromjson'

    - name: Request GitHub OIDC Token with Correct Audience
      id: auth
      run: |
        TOKEN_JSON=$(curl -s -X GET -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com")
        echo "OIDC Token JSON: $TOKEN_JSON"
        OIDC_VALUE=$(echo "$TOKEN_JSON" | jq -r '.value')
        echo "::set-output name=OIDC_TOKEN::$OIDC_VALUE"
              
    - name: Configure AWS Credentials via OIDC
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsRole
        aws-region: eu-west-2

    - name: Install Python Dependencies
      run: pip install -r requirements.txt

    - name: Bootstrap CDK (if required)
      run: cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/eu-west-2

    - name: Deploy AWS CDK
      run: cdk deploy --all --require-approval never

    - name: Sync Frontend Files to S3
      run: aws s3 sync ./frontend s3://veasy.org.test.arq --acl public-read

    - name: 📣 Notify Slack of Successful Deployment
      if: success()
      run: |
        END_TIME=$(date +%s)
        DURATION=$((END_TIME - START_TIME))
        MINUTES=$((DURATION / 60))
        SECONDS=$((DURATION % 60))
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"✅ *Test deployed successfully to production*\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\n🕒 Duration: ${MINUTES}m ${SECONDS}s\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📣 Notify Slack of Failed Deployment
      if: failure()
      run: |
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"  *Test deployment failure to production*\nBranch: ${{ github.ref }}\nCommit: ${{ github.sha }}\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
